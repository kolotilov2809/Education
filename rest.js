//rest - объединяет отдельные элементы в один массив

//создадим переменную log, это будет функция 
const log = function(a,b, ...rest) {//функция обязательно принимает аргумент a, обязательно принимает аргумент b. а вот дальше мы не знаем сколько аргументов у нас может быть. Может ни одного, а может 10,20,100...Вот rest оператор занимается тем, что контролирует что сообщает что здесь может быть бесконечное кол-во следующих аргументов. Он обозначается как ... и далее его нужно как то назвать(в нашем случае мы назвали его rest).
    console.log(a,b,rest);//в консоль мы выводим a,b,rest. rest оператор собирает все оставшееся, что попадет в него и формирует из этого массив
};
//далее вызываем функцию log. во внутрь закинем строки a = 'basic', b = 'rest'. остальные аргументы опциональны, могут придти, а могут нет. строки 'operator', 'usage' уже попадут в массив, тк сработал rest оператор. он собрал отдельные сущности в массив
log('basic', 'rest', 'operator', 'usage');//basic rest [ 'operator', 'usage' ]

//параметры по умолчанию
//иногда в наших функциях , параметры , котрые передаем по умолчанию имели какие то значения

//функция будет вычислять значение либо просто его умножать
//если мы не укажем второй параметр, то по умолчанию number будет умножено на 2
function calcOrDouble(number, basis = 2) {
    console.log(number * basis);
}

calcOrDouble(3,5);